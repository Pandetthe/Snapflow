// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Snapflow.Infrastructure.Persistence;

#nullable disable

namespace Snapflow.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251016190429_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.BoardMembers.BoardMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_members");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_members_board_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_members_user_id");

                    b.ToTable("members", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Boards.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_boards");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_boards_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_boards_deleted_by_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_boards_title")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "GIN");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_boards_updated_by_id");

                    b.ToTable("boards", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Cards.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ListId")
                        .HasColumnType("integer")
                        .HasColumnName("list_id");

                    b.Property<int>("SwimlaneId")
                        .HasColumnType("integer")
                        .HasColumnName("swimlane_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_cards_board_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_cards_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_cards_deleted_by_id");

                    b.HasIndex("ListId")
                        .HasDatabaseName("ix_cards_list_id");

                    b.HasIndex("SwimlaneId")
                        .HasDatabaseName("ix_cards_swimlane_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_cards_updated_by_id");

                    b.ToTable("cards", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Lists.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SwimlaneId")
                        .HasColumnType("integer")
                        .HasColumnName("swimlane_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_lists");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_lists_board_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_lists_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_lists_deleted_by_id");

                    b.HasIndex("SwimlaneId")
                        .HasDatabaseName("ix_lists_swimlane_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_lists_updated_by_id");

                    b.ToTable("lists", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Swimlanes.Swimlane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_swimlanes");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_swimlanes_board_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_swimlanes_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_swimlanes_deleted_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_swimlanes_updated_by_id");

                    b.ToTable("swimlanes", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<int?>("CardId")
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_tags_board_id");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_tags_card_id");

                    b.ToTable("tags", "public");
                });

            modelBuilder.Entity("Snapflow.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Snapflow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Snapflow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Snapflow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Snapflow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("Snapflow.Domain.BoardMembers.BoardMember", b =>
                {
                    b.HasOne("Snapflow.Domain.Boards.Board", "Board")
                        .WithMany("Members")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_members_boards_board_id");

                    b.HasOne("Snapflow.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_members_users_user_id");

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Snapflow.Domain.Boards.Board", b =>
                {
                    b.HasOne("Snapflow.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_boards_users_created_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_boards_users_deleted_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_boards_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Snapflow.Domain.Cards.Card", b =>
                {
                    b.HasOne("Snapflow.Domain.Boards.Board", "Board")
                        .WithMany("Cards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_boards_board_id");

                    b.HasOne("Snapflow.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_users_created_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_cards_users_deleted_by_id");

                    b.HasOne("Snapflow.Domain.Lists.List", "List")
                        .WithMany("Cards")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_lists_list_id");

                    b.HasOne("Snapflow.Domain.Swimlanes.Swimlane", "Swimlane")
                        .WithMany("Cards")
                        .HasForeignKey("SwimlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_swimlanes_swimlane_id");

                    b.HasOne("Snapflow.Domain.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_cards_users_updated_by_id");

                    b.Navigation("Board");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("List");

                    b.Navigation("Swimlane");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Snapflow.Domain.Lists.List", b =>
                {
                    b.HasOne("Snapflow.Domain.Boards.Board", "Board")
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lists_boards_board_id");

                    b.HasOne("Snapflow.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lists_users_created_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_lists_users_deleted_by_id");

                    b.HasOne("Snapflow.Domain.Swimlanes.Swimlane", "Swimlane")
                        .WithMany("Lists")
                        .HasForeignKey("SwimlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lists_swimlanes_swimlane_id");

                    b.HasOne("Snapflow.Domain.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_lists_users_updated_by_id");

                    b.Navigation("Board");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Swimlane");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Snapflow.Domain.Swimlanes.Swimlane", b =>
                {
                    b.HasOne("Snapflow.Domain.Boards.Board", "Board")
                        .WithMany("Swimlanes")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_swimlanes_boards_board_id");

                    b.HasOne("Snapflow.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_swimlanes_users_created_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_swimlanes_users_deleted_by_id");

                    b.HasOne("Snapflow.Domain.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_swimlanes_users_updated_by_id");

                    b.Navigation("Board");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Snapflow.Domain.Tags.Tag", b =>
                {
                    b.HasOne("Snapflow.Domain.Boards.Board", null)
                        .WithMany("Tags")
                        .HasForeignKey("BoardId")
                        .HasConstraintName("fk_tags_boards_board_id");

                    b.HasOne("Snapflow.Domain.Cards.Card", null)
                        .WithMany("Tags")
                        .HasForeignKey("CardId")
                        .HasConstraintName("fk_tags_cards_card_id");
                });

            modelBuilder.Entity("Snapflow.Domain.Boards.Board", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Lists");

                    b.Navigation("Members");

                    b.Navigation("Swimlanes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Snapflow.Domain.Cards.Card", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Snapflow.Domain.Lists.List", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Snapflow.Domain.Swimlanes.Swimlane", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Lists");
                });
#pragma warning restore 612, 618
        }
    }
}
